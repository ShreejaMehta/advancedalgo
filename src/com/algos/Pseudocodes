# Pseucodes 
## Sorting
### Insertion Sort
Recursive
``` java
function InsertionSortRecursive(arr, n)
   if n <= 1
      return

   InsertionSortRecursive(arr, n-1)

   key = arr[n-1]
   j = n-2

   while j >= 0 and arr[j] > key
      arr[j+1] = arr[j]
      j = j-1

   arr[j+1] = key

```
Iterative
``` java
function insertionSort(arr)
    for i from 1 to length(arr) - 1
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key
            arr[j + 1] = arr[j]
            j = j - 1
        arr[j + 1] = key
```

### Merge Sort

Recursive
``` java
function mergeSort(arr, left, right)
    if left < right
        mid = (left + right) / 2
        mergeSort(arr, left, mid)
        mergeSort(arr, mid + 1, right)
        merge(arr, left, mid, right)

function merge(arr, left, mid, right)
    create two temporary arrays L and R
    copy elements from arr[left...mid] to L
    copy elements from arr[mid+1...right] to R
    i = 0, j = 0, k = left
    while i < length(L) and j < length(R)
        if L[i] <= R[j]
            arr[k] = L[i]
            i = i + 1
        else
            arr[k] = R[j]
            j = j + 1
        k = k + 1
    while i < length(L)
        arr[k] = L[i]
        i = i + 1
        k = k + 1
    while j < length(R)
        arr[k] = R[j]
        j = j + 1
        k = k + 1
```
Iterative
``` java
procedure mergeSort(arr)
    n = length(arr)

    // Divide the array into smaller subarrays of size 1, 2, 4, 8, ...
    for currentSize = 1 to n - 1 step currentSize * 2
        // Merge subarrays of size currentSize
        for left = 0 to n - 1 step 2 * currentSize
            mid = min(left + currentSize - 1, n - 1)
            right = min(left + 2 * currentSize - 1, n - 1)
            merge(arr, left, mid, right)

procedure merge(arr, left, mid, right)
    n1 = mid - left + 1
    n2 = right - mid

    leftArray = new array[n1]
    rightArray = new array[n2]

    // Fill the temporary left and right arrays
    for i = 0 to n1 - 1
        leftArray[i] = arr[left + i]
    for j = 0 to n2 - 1
        rightArray[j] = arr[mid + 1 + j]

    // Merge the temporary arrays back into the original array
    i = 0, j = 0, k = left
    while i < n1 and j < n2
        if leftArray[i] <= rightArray[j]
            arr[k] = leftArray[i]
            i = i + 1
        else
            arr[k] = rightArray[j]
            j = j + 1
        k = k + 1

    // Copy the remaining elements of the left array, if any
    while i < n1
        arr[k] = leftArray[i]
        i = i + 1
        k = k + 1

    // Copy the remaining elements of the right array, if any
    while j < n2
        arr[k] = rightArray[j]
        j = j + 1
        k = k + 1
```
### Quick Sort
Recursive
``` java
function quickSort(arr, low, high)
    if low < high
        pivotIndex = partition(arr, low, high)
        quickSort(arr, low, pivotIndex - 1)
        quickSort(arr, pivotIndex + 1, high)

function partition(arr, low, high)
    pivot = arr[high]
    i = low - 1
    for j from low to high - 1
        if arr[j] <= pivot
            i = i + 1
            swap arr[i] and arr[j]
    swap arr[i + 1] and arr[high]
    return i + 1
```
Iterative
``` java
procedure partition(arr, low, high)
    pivot = arr[high]
    i = low - 1

    for j = low to high - 1
        if arr[j] < pivot
            i = i + 1
            swap arr[i] and arr[j]

    swap arr[i + 1] and arr[high]
    return i + 1

procedure quickSort(arr)
    stack.push(low)
    stack.push(high)

    while stack is not empty
        high = stack.pop()
        low = stack.pop()

        pivotIndex = partition(arr, low, high)

        if pivotIndex - 1 > low
            stack.push(low)
            stack.push(pivotIndex - 1)

        if pivotIndex + 1 < high
            stack.push(pivotIndex + 1)
            stack.push(high)
```

### Heap Sort 
Iterative
``` java
function heapSort(arr)
    n = length(arr)
    for i from n/2 - 1 down to 0
        heapify(arr, n, i)
    for i from n - 1 down to 1
        swap arr[0] and arr[i]
        heapify(arr, i, 0)

function heapify(arr, n, i)
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2
    if left < n and arr[left] > arr[largest]
        largest = left
    if right < n and arr[right] > arr[largest]
        largest = right
    if largest != i
        swap arr[i] and arr[largest]
        heapify(arr, n, largest)
```
Recursive 
``` java
// Main function to perform heap sort
function heapSort(arr):
    n = arr.length
    
    // Build a max heap
    for i = n / 2 - 1 down to 0:
        heapify(arr, n, i)
    
    // Extract elements from the heap one by one
    for i = n - 1 down to 1:
        swap(arr[0], arr[i])
        heapify(arr, i, 0)

// Function to heapify a subtree rooted at given index
function heapify(arr, n, i):
    largest = i  // Initialize largest as root
    left = 2 * i + 1
    right = 2 * i + 2
    
    // If left child is larger than root
    if left < n and arr[left] > arr[largest]:
        largest = left
    
    // If right child is larger than largest so far
    if right < n and arr[right] > arr[largest]:
        largest = right
    
    // If largest is not root
    if largest != i:
        swap(arr[i], arr[largest])
        heapify(arr, n, largest)

```
## Graph Algos 

### DFS
``` java
DFS(adjList, start):
    visited = array of boolean values, initialized to false
    dfsUtil(start, visited, adjList)

dfsUtil(v, visited, adjList):
    visited[v] = true
    print v

    for adj in adjList[v]:
        if visited[adj] is false:
            dfsUtil(adj, visited, adjList)
```
Explanation:

- The DFS function takes the adjacency list adjList and the starting vertex start as input.
-  It initializes the visited array, which keeps track of visited vertices, to all false.
-  It then calls the dfsUtil function with the starting vertex and the visited array.
-  The dfsUtil function performs the actual DFS traversal.
-  It marks the current vertex v as visited by setting visited[v] to true.
-  It prints the value of the current vertex v.
-  It then iterates over the adjacent vertices adj of the current vertex.
-  For each adjacent vertex adj, if it is not visited (visited[adj] is false), it recursively calls dfsUtil on that adjacent vertex.
### BFS
``` java
BFS(adjList, start):
    visited = array of boolean values, initialized to false
    queue = empty queue

    visited[start] = true
    queue.enqueue(start)

    while queue is not empty:
        v = queue.dequeue()
        print v

        for adj in adjList[v]:
            if visited[adj] is false:
                visited[adj] = true
                queue.enqueue(adj)
```
Explanation:

- The BFS function takes the adjacency list adjList and the starting vertex start as input.
- It initializes the visited array, which keeps track of visited vertices, to all false.
- It initializes an empty queue.
- It marks the starting vertex as visited by setting visited[start] to true.
- It enqueues the starting vertex into the queue.
- While the queue is not empty, the loop continues.
- In each iteration, it dequeues a vertex v from the front of the queue.
- It prints the value of the dequeued vertex v.
- It then iterates over the adjacent vertices adj of the dequeued vertex.
- For each adjacent vertex adj, if it is not visited (visited[adj] is false), it marks it as visited by setting visited[adj] to true and enqueues it into the queue.

### Prims
``` java
Prim'sAlgorithm(V, E, edges, startVertex):
    Initialize an empty adjacency list adjList
    Initialize an empty priority queue pq
    Initialize an empty list mstEdges
    Initialize an empty boolean array visited
    Initialize mstWeight to 0

    for i in 0 to V-1:
        Add an empty list to adjList

    for each edge in edges:
        u, v, weight = edge
        Add Edge(u, v, weight) to adjList[u]
        Add Edge(v, u, weight) to adjList[v]

    Visit(startVertex)

    while pq is not empty:
        e = pq.poll()
        u = e.u
        v = e.v
        if visited[u] and visited[v]:
            continue
        Add e to mstEdges
        mstWeight += e.weight
        if not visited[u]:
            Visit(u)
        if not visited[v]:
            Visit(v)

    return mstEdges, mstWeight

Visit(vertex):
    visited[vertex] = true
    for each edge in adjList[vertex]:
        if not visited[edge.v]:
            pq.offer(edge)
```

### Kruskal's 
``` java
KruskalAlgorithm(n, edges):
    Initialize an empty list mst
    Create an array parent of size n and initialize each element as its own parent

    Sort the edges in ascending order based on their weights

    for each edge in edges:
        sourceParent = findParent(edge.source, parent)
        destinationParent = findParent(edge.destination, parent)
        if sourceParent is not equal to destinationParent:
            Add edge to mst
            Set parent[sourceParent] to destinationParent

    return mst

findParent(node, parent):
    if parent[node] is not equal to node:
        Set parent[node] to findParent(parent[node], parent)
    return parent[node]
```

### Dijkstra's
``` java
Node class:
    vertex
    distance
    
Dijkstra(graph, start):
    distances = new Map to store the shortest distances from the start vertex to each vertex
    pq = new PriorityQueue to keep track of the vertices with their distances
    visited = new Set to keep track of visited vertices

    Add start vertex to pq with distance 0

    while pq is not empty:
        node = remove vertex with minimum distance from pq

        if node.vertex is already visited:
            continue

        Mark node.vertex as visited and store its distance in distances

        for each neighbor in graph[node.vertex]:
            if neighbor is not visited:
                newDistance = node.distance + graph[node.vertex][neighbor]
                Add neighbor to pq with distance newDistance

    Print distances
```